[{"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/index.js":"1","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/store/storeManager.js":"2","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/homePage/App.js":"3","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/rootReducer.js":"4","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/homePage/Navbar.js":"5","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/actions/action.js":"6","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/NewForm.js":"7","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/generatedForm/FormGeneration.js":"8","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/queTypeUpdater.js":"9","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/formHandler.js":"10","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/queHandler.js":"11","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/QueType.js":"12","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/ControlPanel.js":"13","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/QueTemplate.js":"14","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/Response.js":"15","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/AdditionalTypeQue.js":"16","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/SingleTypeQue.js":"17","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/ParaTypeQue.js":"18","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/MultiTypeQue.js":"19"},{"size":449,"mtime":1613567752541,"results":"20","hashOfConfig":"21"},{"size":538,"mtime":1613567752541,"results":"22","hashOfConfig":"21"},{"size":3748,"mtime":1614159965669,"results":"23","hashOfConfig":"21"},{"size":304,"mtime":1613567752541,"results":"24","hashOfConfig":"21"},{"size":487,"mtime":1614159965669,"results":"25","hashOfConfig":"21"},{"size":926,"mtime":1613567752541,"results":"26","hashOfConfig":"21"},{"size":2978,"mtime":1614159965669,"results":"27","hashOfConfig":"21"},{"size":2073,"mtime":1613567752541,"results":"28","hashOfConfig":"21"},{"size":1609,"mtime":1614159965673,"results":"29","hashOfConfig":"21"},{"size":482,"mtime":1613567752541,"results":"30","hashOfConfig":"21"},{"size":2035,"mtime":1613567752541,"results":"31","hashOfConfig":"21"},{"size":2222,"mtime":1614159965669,"results":"32","hashOfConfig":"21"},{"size":1506,"mtime":1614159965669,"results":"33","hashOfConfig":"21"},{"size":5358,"mtime":1614159965669,"results":"34","hashOfConfig":"21"},{"size":283,"mtime":1614159965669,"results":"35","hashOfConfig":"21"},{"size":1965,"mtime":1614159965669,"results":"36","hashOfConfig":"21"},{"size":4966,"mtime":1614159965669,"results":"37","hashOfConfig":"21"},{"size":1413,"mtime":1614159965669,"results":"38","hashOfConfig":"21"},{"size":4942,"mtime":1614159965669,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"gqgbps",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"42"},"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/index.js",[],["91","92"],"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/store/storeManager.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/homePage/App.js",["93","94"],"import React, { Fragment } from \"react\";\nimport NewForm from \"../formHandler/NewForm.js\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport { formIdAction, queAction } from \"../actions/action.js\";\nimport { connect } from 'react-redux';\nimport Navbar from \"./Navbar.js\";\nimport \"../css/homePageStyle.css\";\nimport FormGeneration from \"../generatedForm/FormGeneration\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteForm = this.deleteForm.bind(this);\n    this.handleFormPaths = this.handleFormPaths.bind(this);\n  }\n\n  handleFormPaths() {\n    let formIdsObj = this.props.formIDs;\n    let formIdsKey = Object.keys(formIdsObj);\n    let newIDs = parseInt(formIdsKey[formIdsKey.length - 1]) + 1;\n    console.log('newIDs', newIDs)\n\n   \n\n    this.props.dispatchFormIDs({\n      type: \"addNewForm\",\n      payload: {\n        formID: newIDs,\n        formTitle: \"Untitled\"\n      }\n    });\n    console.log(\"indise aap between two dispatch\", newIDs)\n\n    this.props.dispatchPreFormData({\n      // queType: \"\",\n      type: \"preUpdate1\",\n      payload: {\n\n        formID: newIDs - 1,\n        questionNo: 0,\n        data: { question: \"Question\", options: { 0: \"Option\" } }\n      }\n    })\n\n\n  }\n\n\n  deleteForm(event) {\n    let formID = parseInt(event.target.id);\n\n    this.props.dispatchFormIDs({\n      type: \"removeForm\",\n      payload: { formID }\n    })\n\n  }\n  render() {\n    console.log(this.props.formIDs, \"inside render\");\n    let formIdsObj = this.props.formIDs;\n    let formIdsKey = Object.keys(formIdsObj);\n\n    let paths = \"/newform\" + `${formIdsKey[formIdsKey.length - 1]}`;\n    console.log(\"paths\", paths);\n    // let formID = 0;\n    let formList = formIdsKey.map((elm) => {\n\n      return (\n        <Route key={elm} path={`/newform${elm}`}>\n\n          <div className=\"formMainCont\" key={elm}>\n\n            <NewForm formID={elm} formTitle={formIdsObj[elm]} formPath={`/newform${elm}`} />\n          </div>\n        </Route>\n      );\n    });\n\n    let formLink = formIdsKey.map((elm) => {\n      return (<Fragment>\n        <div className=\"formLinkCont\">\n\n\n\n          <div class=\"dropdown\">\n            <button class=\"btn btn-secondary formLinkOption\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">...\n\n            </button>\n            <ul class=\"dropdown-menu\" id=\"deleteBtn\" aria-labelledby=\"dropdownMenuButton1\">\n              <li><span class=\"dropdown-item\" id={elm} onClick={this.deleteForm}>Delete Form</span></li>\n\n            </ul>\n          </div>\n\n          <Link className=\"formLink\" key={elm} to={`/newform${elm}`}>\n\n            <span className=\"formLinkSpan\">{formIdsObj[elm]}</span>\n          </Link>\n        </div>\n\n\n      </Fragment>\n\n      );\n    });\n\n    formLink = formLink.slice(0, formLink.length - 1);\n\n    // console.log(\"formList\", {formList});\n    return (\n\n      <Router>\n        <Navbar />\n        <div className=\"mainCont\">\n          <Switch>\n\n            {formList}\n\n            <Route path=\"/\">\n              <div className=\"formLinkCont createForm\">\n\n                <Link className=\"formLink\" to={paths}>\n                  <span onClick={this.handleFormPaths} className=\"plusIcon\">New Form</span>\n                </Link>\n              </div>\n              {formLink}\n            </Route>\n\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  console.log('state', state)\n  return {\n    formIDs: state.formHandler.formIDs\n\n  }\n}\nconst mapDispatchtoProps = (dispatch) => {\n  return {\n\n    dispatchFormIDs: (para) => dispatch(formIdAction(para)),\n    dispatchPreFormData: (para) => dispatch(queAction(para))\n\n  }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(App);\n","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/rootReducer.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/homePage/Navbar.js",["95"],"import React from \"react\";\nimport \"../css/navbarStyle.css\";\n\nexport default class Navbar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <nav className=\"navBar\">\n                <span id=\"siteName\">Form Control</span>\n                <div className=\"navBarBtnCont\">\n                    <span className=\"navBarBtn\">About</span>\n                    \n                </div>\n\n            </nav>\n\n        );\n    }\n}\n","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/actions/action.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/NewForm.js",["96","97","98"],"import React, { Fragment } from \"react\";\nimport QueTemplate from \"./QueTemplate\";\nimport QueType from \"./QueType\";\nimport ControlPanel from \"./ControlPanel\";\nimport { connect } from \"react-redux\";\nimport { formIdAction, queType } from \"../actions/action\";\nimport \"../css/queStyle.css\";\nimport axios from \"axios\";\n\nimport Response from \"./Response\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nclass NewForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeFormName = this.changeFormName.bind(this);\n    this.sendFormDetails = this.sendFormDetails.bind(this);\n\n  }\n  changeFormName(event) {\n    let newFormName = event.target.value;\n    let formID = event.target.id;\n\n    if (newFormName !== \"\") {\n\n      this.props.dispatchFormTitle({\n        type: \"addNewForm\",\n        payload: { formID, formTitle: newFormName }\n      });\n    }\n\n\n  }\n  sendFormDetails() {\n    let formID = this.props.formID\n    axios.post(\"http://127.0.0.1:8000/form_api/formcreated/\", {\n      form_name: this.props.formIDs[formID]\n    });\n\n    let queTypeKeys = Object.keys(this.props.queType[formID]);\n    let allQueDetails = this.props.queHandler[formID];\n\n    queTypeKeys.forEach((element) => {\n\n      let queInfo = allQueDetails[element];\n      // if (this.props.queType[element] = \"text\") {\n\n      axios.post(\"http://127.0.0.1:8000/form_api/questionlist/\", {\n\n        \"question\": queInfo.question,\n        \"question_type\": \"ANSWER\",\n        \"title\": this.props.formIDs[formID]\n      })\n\n      // }\n      let emptyObj = {};\n\n\n    })\n\n  }\n\n\n\n  render() {\n    // console.log('NEwFORM', this.props.queDetails)\n\n\n    return (<Fragment>\n      <Router>\n          <ControlPanel formPath={this.props.formPath}></ControlPanel>\n        <Switch>\n          {/* <Route path={`${this.props.formPath}/form`}>Opened<FormGeneration formID={this.props.formID}></FormGeneration></Route> */}\n\n          <Route path={`${this.props.formPath}/response`}>\n            <Response></Response>\n          </Route>\n\n          <Route path={this.props.formPath}>\n            <div className=\"formNameCont\"><input id={this.props.formID} defaultValue={this.props.formTitle} onChange={this.changeFormName}></input></div>\n\n\n            <QueTemplate formID={this.props.formID}></QueTemplate>\n            <QueType formID={this.props.formID} />\n\n          </Route>\n\n\n\n        </Switch>\n          <div className=\"generateBtn\" onClick={this.sendFormDetails}>Generate Form</div>\n      </Router>\n    </Fragment>\n\n\n    );\n  }\n}\n\n// const mapStatetoProps = (state) => {\n//   return {\n//     queDetails: state\n//   }\n// }\n\nconst mapStatetoProps = (state) => {\n  return {\n    formIDs: state.formHandler.formIDs,\n    queType: state.queTypeUpdater,\n    queHandler: state.queHandler\n  }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n  return {\n    dispatchFormTitle: (para) => dispatch(formIdAction(para))\n  }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(NewForm);\n","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/generatedForm/FormGeneration.js",["99","100","101","102","103","104"],"import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\n\n\nclass FormGeneration extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        let queInfoObj = this.props.queInfo[this.props.formID];\n\n        let queTypeObj = this.props.queType[this.props.formID];\n        let arrayType = [];\n\n        let form = Object.keys(queTypeObj).map((queKey, index) => {\n\n\n\n            // arrayType.push(queTypeObj[key]);\n            if (queTypeObj[queKey] == \"text\") {\n                // queInfoObj[queKey];\n                return <Fragment><div className=\"queCont\" >\n                    <div>Q.{index + 1} {queInfoObj[queKey].question}</div>\n                    <input></input>\n                </div >\n\n                </Fragment >\n\n\n            }\n            if (queTypeObj[queKey] == \"radio\" || queTypeObj[queKey] == \"checkbox\") {\n                let optionsKey = Object.keys(queInfoObj[queKey].options);\n                // optionsKey.pop();\n\n                return (<Fragment><div className=\"queCont\" >\n                    <div>Q.{index + 1} {queInfoObj[queKey].question}</div>\n                    <div>\n                        {optionsKey.map((optionKey) => {\n                            return (<div>\n                                <input type={queTypeObj[queKey]} name={queKey} /> <span>{queInfoObj[queKey].options[optionKey]}</span>\n                            </div>)\n\n                        })}\n                    </div>\n\n                </div >\n\n                </Fragment >);\n\n            }\n\n\n\n        })\n\n        return (\n\n            <form>\n                Hello\n                {form}\n            </form>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log('state', state)\n    return {\n        queType: state.queTypeUpdater,\n        queInfo: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        // dispatchFilledForm: (para) => dispatch(filledForm(para))\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(FormGeneration);\n","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/queTypeUpdater.js",["105","106","107"],"import * as actions from \"../actions/action.js\";\nlet somearray, newarray, counter = 0;\nexport const queTypeUpdater = (\n  state = {}, action) => {\n  //   console.log('action.type', action.type)\n  //   console.log(queDetails.push(action.type));\n  //   return state;\n  // };\n  // somearray = state.queDetails;\n  // console.log('state.queDetails[action.formID', somearray)\n\n\n\n\n  switch (action.type) {\n    case actions.ADD_TXT:\n\n      console.log('state.queDetails', state, action)\n\n\n      return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n    case actions.ADD_CHECKBOX:\n\n      console.log('state.queDetails', state, action)\n\n\n      return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n\n    case actions.ADD_RADIO:\n\n      console.log('state.queDetails', state, action)\n\n\n      return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n\n    case \"removeQue\":\n      console.log('state,action', state, action)\n\n      let updatedQue = state[action.formID];\n      delete updatedQue[action.questionNo]\n      return { ...state, [action.formID]: { ...updatedQue } };\n\n    case \"email\":\n      return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n\n      case \"tel\":\n        return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n  \n\n\n    default:\n      return state;\n  }\n\n}\n// };\n// {\n//   queNo:,\n//     queType:,\n//   data: {\n\n//   }\n// }\n\n\n// state = {\n//   formID: { queDetails: {} }","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/formHandler.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/reducers/queHandler.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/QueType.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/ControlPanel.js",["108"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/controlPanelStyle.css';\n\n\nclass ControlPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.changeStyle=this.changeStyle.bind(this);\n\n    }\n\n    changeStyle(event){\n        console.log('event.target', event.target)\n\n        if(event.target.id==\"responseBtn\"){\n            document.getElementById(event.target.id).className=\"cntrlPanelBtns active\";\n            document.getElementById(\"formBtn\").className=\"cntrlPanelBtns\";\n            document.getElementById(\"genformBtn\").style.visibility=\"hidden\";\n        }\n\n        else{\n            document.getElementById(event.target.id).className=\"cntrlPanelBtns active\";\n            document.getElementById(\"responseBtn\").className=\"cntrlPanelBtns \";\n            document.getElementById(\"genformBtn\").style.visibility=\"visible\";\n\n        }\n\n    }\n\n    render() {\n        return (\n\n            <div className=\"controlPanel\">\n                <div className=\"pairCont\">\n                <Link onClick={this.changeStyle} id=\"formBtn\" className=\"cntrlPanelBtns active\"to={this.props.formPath}>Form</Link>\n                     <Link  id=\"responseBtn\" onClick={this.changeStyle} className=\"cntrlPanelBtns\" to={`${this.props.formPath}/response`}> Response</Link>\n                </div>\n                <span id=\"genformBtn\" className=\"cntrlPanelBtns generateBtn\">Generate Form</span>\n            </div>\n        )\n    }\n\n}\n\n\nexport default ControlPanel;","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/QueTemplate.js",["109","110","111","112","113","114","115","116","117","118","119","120"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { connect } from \"react-redux\";\nimport MultiTypeQue from \"./MultiTypeQue\";\nimport SingleTypeQue from \"./SingleTypeQue\";\nimport ParaTypeQue from \"./ParaTypeQue\";\nimport AdditionalTypeQue from \"./AdditionalTypeQue.js\";\n// import \"../js/jsForStyling\"\nimport { queType, removeQue } from \"../actions/action\";\n\n\nclass QueTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleQueInversion = this.handleQueInversion.bind(this);\n    this.removeQuestion = this.removeQuestion.bind(this);\n\n    // this.displayOptions= this.displayOptions.bind(this);\n\n\n\n  }\n  \n//  displayOptions(event){\n//      console.log('event.target', event.target.id)\n\n//   // document.querySelector(`#${event.target.id} > .dropdownQue `).style.visibility=\"hidden\";\n\n//  }\n\n  handleQueInversion(event) {\n    let queNo = event.target.id;\n    console.log('event.target.value', event.target.name)\n    // ReactDOM.findDOMNode(event.target).className = \"dropdown-item active\";\n\n    this.props.dispatchQueInversion({\n      type: event.target.name,\n      payload: {\n        formID: this.props.formID,\n        questionNo: queNo,\n\n      }\n    });\n  }\n\n  removeQuestion(event) {\n    let queNo = event.target.id;\n\n    // let queObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n    // // console.log('optionsObj', optionsObj)\n    // let optionsKey = Object.keys(queObj);\n    // delete queObj[queNo];\n\n    this.props.dispatchRemoveQuestion({\n      type: \"removeQue\",\n      payload: {\n\n        formID: this.props.formID,\n        questionNo: queNo,\n\n      }\n    });\n\n  }\n\n  render() {\n    // const { queDetails } = this.props;\n    console.log('inside QT', this.props.queTypeUpdater)\n    let formKeys = Object.keys(this.props.queTypeUpdater);\n    console.log('formKeys', formKeys)\n    \n    \n    let que = formKeys.map((element, index) => {\n      console.log('object', (this.props.formID == parseInt(element)))\n      if (this.props.formID == parseInt(element)) {\n        let queKeys = Object.keys(this.props.queTypeUpdater[element]);\n        console.log('INSIDE IF')\n        \n        return queKeys.map((elm, ind) => {\n          let regex= new RegExp(this.props.queTypeUpdater[element][parseInt(elm)],\"g\")\n          \n          return (\n            <div  id={`queCont${elm}`} className=\"queCont\" key={ind}>\n              <div className=\"dropdownQue\">\n                <button type=\"button\" class=\"btn btn-secondary shadow-none\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  Change Type</button>\n\n                <ul className=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"dropdownMenuButton2\">\n                  <li><a className=\"dropdown-item\" name=\"text\" value=\"text\" id={parseInt(elm)} onClick={this.handleQueInversion}>Paragraph</a></li>\n\n                  <li><a className=\"dropdown-item\" name=\"radio\" value=\"radio\" id={parseInt(elm)} onClick={this.handleQueInversion}>Single Option</a></li>\n\n                  <li><a className=\"dropdown-item\" name=\"checkbox\" value=\"checkbox\" id={parseInt(elm)} onClick={this.handleQueInversion}>Multiple Option</a></li>\n                  <li><a className=\"dropdown-item\" name=\"email\" value=\"email\" id={parseInt(elm)} onClick={this.handleQueInversion}>Email</a></li>\n                  <li><a className=\"dropdown-item\" name=\"tel\" value=\"tel\" id={parseInt(elm)} onClick={this.handleQueInversion}>Phone No.</a></li>\n\n                </ul>\n                <button id={parseInt(elm)} onClick={this.removeQuestion} class=\"btn btn-danger queCross shadow-none\">\n                &#x2715;\n              </button>\n              </div>\n              {\n                this.props.queTypeUpdater[element][parseInt(elm)] == \"text\" ? <ParaTypeQue formID={this.props.formID} queNo={parseInt(elm) } /> : null\n              }\n\n              {\n                this.props.queTypeUpdater[element][parseInt(elm)] == \"radio\" ? <SingleTypeQue formID={this.props.formID} queNo={parseInt(elm)} /> : null\n              }\n\n              {\n                this.props.queTypeUpdater[element][parseInt(elm)] == \"checkbox\" ? <MultiTypeQue formID={this.props.formID} queNo={parseInt(elm)} /> : null\n              }\n              {\n                regex.test(\"emailtel\") ? <AdditionalTypeQue formID={this.props.formID} queNo={parseInt(elm)} Type={this.props.queTypeUpdater[element][parseInt(elm)]} /> : null\n              }\n              {/* \n              <select id={parseInt(elm)} onChange={this.handleQueInversion} >\n                <option select >Change Question Type</option>\n                <option name=\"text\" value=\"text\">Para</option>\n                <option name=\"checkbox\" value=\"checkbox\"> CheckBOx</option>\n                <option name=\"radio\" value=\"radio\">Radio</option>\n\n              </select> */}\n\n\n\n\n\n\n\n\n\n\n\n            </div>\n          )\n        })\n      }\n    })\n\n\n\n    return <div  className=\"allQueCont\">{que}</div>;\n  }\n\n\n\n\n}\n\nconst mapStatetoProps = (state) => {\n  // console.log('Indise quetemplate', state)\n  return {\n    queTypeUpdater: state.queTypeUpdater\n  }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n  return {\n    dispatchQueInversion: (para) => dispatch(queType(para)),\n    dispatchRemoveQuestion: (para) => dispatch(removeQue(para))\n  }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(QueTemplate);\n","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/Response.js",["121"],"\nimport React from \"react\";\n\n\n\nclass Response extends React.Component{\n    constructor(props) {\n        super(props)\n    \n        \n    }\n\n    render(){\n        return(\n            <div>\n                Response Page\n            </div>\n        )\n    }\n    \n}\n\nexport default Response;","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/AdditionalTypeQue.js",["122","123","124","125"],"import React,{Fragment} from 'react';\nimport { queAction } from \"../actions/action.js\";\nimport { connect } from \"react-redux\";\n\nlet question, counter = 0;\n\nclass AdditionlTypeQue extends React.Component{\n\n    constructor(props) {\n        super(props)\n    \n        this.handleInfo = this.handleInfo.bind(this);\n\n\n\n    }\n    // componentDidMount() {\n    //     if (counter == 0) {\n\n    //         this.props.dispatchQueInfo({\n    //             type: \"para\",\n    //             question: \"Question\",\n    //             formID: this.props.formID,\n    //             questionNo: this.props.queNo + 1\n\n    //         });\n    //     }\n\n    // }\n\n    handleInfo(event) {\n        question = event.target.value;\n        console.log('placeholder', question)\n        let queInfo = {\n            type: \"para\",\n            payload: {\n                data: { question },\n                formID: this.props.formID,\n                questionNo: this.props.queNo\n            }\n\n        }\n\n\n        this.props.dispatchQueInfo(queInfo);\n\n    }\n\n    render() {\n        let queData = this.props.queHandler[this.props.formID][this.props.queNo];\n\n        return (<Fragment>\n            {this.props.Type==\"email\"?<Fragment>\n            <div className=\"addQueCont\"> &nbsp;&nbsp;&nbsp;  email:<div className=\"addAnsCont\">example@gmail.com</div></div>\n            \n            </Fragment>:null}\n            {this.props.Type==\"tel\"?<Fragment>\n            <div className=\"addQueCont\">&nbsp;&nbsp;&nbsp;   phone no:<div className=\"addAnsCont\" >9000800055</div></div>\n            </Fragment>:null}\n        </Fragment>)\n\n\n\n}\n}\n\nconst mapStatetoProps = (state) => {\n    console.log(\"state inside ParaTYpeQes\", state)\n    return {\n        queHandler: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        dispatchQueInfo: (para) => dispatch(queAction(para))\n\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(AdditionlTypeQue);\n\n\n\n\n            ","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/SingleTypeQue.js",["126","127","128"],"import React, { Fragment } from 'react';\nimport { connect } from \"react-redux\";\nimport { queAction } from \"../actions/action.js\";\n\n\n\nlet question = \"Question\", opId, options, noOfOps = 1;\nclass SingleTypeQue extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleQueInfo = this.handleQueInfo.bind(this);\n        this.handleOptionInfo = this.handleOptionInfo.bind(this);\n        this.removeOption = this.removeOption.bind(this);\n        this.addOption = this.addOption.bind(this);\n    }\n\n    handleQueInfo(event) {\n\n        question = event.target.value;\n        console.log('placeholder', question)\n\n\n\n\n        let queInfo = {\n            type: \"single\",\n\n            payload: {\n                data: {\n\n                    options: this.props.queHandler[this.props.formID][this.props.queNo].options,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n        }\n        this.props.dispatchQueInfo(queInfo);\n\n\n\n\n    }\n\n    handleOptionInfo(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        let optionsKey = Object.keys(optionsObj);\n\n\n\n        optionsObj[event.target.id] = event.target.value;\n\n\n        let optionInfo = {\n            type: \"single\",\n\n            payload: {\n                data: {\n\n                    options: optionsObj,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n    }\n\n    addOption() {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        optionsKey = parseInt(optionsKey[optionsKey.length - 1])\n        console.log('optionsKey', optionsKey)\n\n\n\n\n\n        let optionInfo = {\n            type: \"single\",\n\n            payload: {\n                data: {\n\n                    options: { [optionsKey + 1]: \"Option\" },\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n\n    }\n\n    removeOption(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n\n        if (optionsKey.length !== 1) {\n\n            delete optionsObj[event.target.id];\n\n            let optionInfo = {\n                type: \"single\",\n\n                payload: {\n                    data: {\n\n                        options: optionsObj,\n\n                        question,\n                    },\n\n                    formID: this.props.formID,\n                    questionNo: this.props.queNo,\n\n\n                }\n\n\n            }\n            this.props.dispatchQueInfo(optionInfo);\n        }\n\n\n\n\n    }\n    render() {\n\n        // noOfOps = this.props.queHandler[this.props.formID][this.props.queNo].noOfOps\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        console.log('optionsKey', optionsKey)\n\n\n        options = optionsKey.map((data, index) => {\n            return <Fragment>\n\n\n                <div class=\"form-check optionsCont\" key={data} id={data}>\n                    <input class=\"form-check-input optionsIcon\" type=\"radio\" name=\"flexRadioDefault\" />\n\n                    <input type=\"text\" className=\"optionInput\" defaultValue={optionsObj[data]} id={data} onBlur={this.handleOptionInfo}></input> <button onClick={this.removeOption} id={data} class=\"btn shadow-none optionCancelBtn \">&#x2715;</button>\n\n                </div>\n\n\n                {/* <input type=\"radio\" name=\"option\" ></input> */}\n\n            </Fragment>\n\n\n        })\n        let queData = this.props.queHandler[this.props.formID][this.props.queNo];\n\n        console.log('queData', queData)\n        return (<Fragment>\n            <div className=\"questionCont\">Q. <input type=\"text\" className=\"queInput\" name='question' onBlur={this.handleQueInfo} defaultValue={queData.question}></input>\n            </div>\n\n\n            {options}\n            <button onClick={this.addOption} class=\"btn btn-primary shadow-none addOption\">Add Option</button>\n        </Fragment>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log(\"state inside ParaTYpeQes\", state)\n    return {\n        queHandler: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        dispatchQueInfo: (para) => dispatch(queAction(para))\n\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(SingleTypeQue);\n\n\n\n","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/ParaTypeQue.js",["129"],"import React, { Fragment } from 'react';\nimport { queAction } from \"../actions/action.js\";\nimport { connect } from \"react-redux\";\n\nlet question, counter = 0;\n\nclass ParaTypeQue extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.handleInfo = this.handleInfo.bind(this);\n        \n    }\n    handleInfo(event) {\n        question = event.target.value;\n        console.log('placeholder', question)\n        let queInfo = {\n            type: \"para\",\n            payload: {\n                data: { question },\n                formID: this.props.formID,\n                questionNo: this.props.queNo\n            }\n\n        }\n\n\n        this.props.dispatchQueInfo(queInfo);\n\n    }\n\n    render() {\n        let queData = this.props.queHandler[this.props.formID][this.props.queNo];\n\n        return (<Fragment><div className=\"questionCont\" >Q. <input className=\"queInput\" type=\"text\" onChange={this.handleInfo} defaultValue={queData.question} /></div>\n            <div className=\"answerCont\">Answer</div>\n        </Fragment>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log(\"state inside ParaTYpeQes\", state)\n    return {\n        queHandler: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        dispatchQueInfo: (para) => dispatch(queAction(para))\n\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(ParaTypeQue);","/home/dgk/Documents/Codes/1- Git-Repos/Form-maker-app/Dev/Form-Maker-App/src/formHandler/MultiTypeQue.js",["130","131","132"],"import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { queAction } from \"../actions/action.js\";\n\nlet question = \"Question\", opId, options, noOfOps = 1;\nclass MultiTypeQue extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleQueInfo = this.handleQueInfo.bind(this);\n        this.handleOptionInfo = this.handleOptionInfo.bind(this);\n        this.removeOption = this.removeOption.bind(this);\n        this.addOption = this.addOption.bind(this);\n    }\n\n    handleQueInfo(event) {\n\n        question = event.target.value;\n        console.log('placeholder', question)\n\n\n\n\n        let queInfo = {\n            type: \"multi\",\n\n            payload: {\n                data: {\n\n                    options: this.props.queHandler[this.props.formID][this.props.queNo].options,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n        }\n        this.props.dispatchQueInfo(queInfo);\n\n\n\n\n    }\n\n    handleOptionInfo(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        let optionsKey = Object.keys(optionsObj);\n\n\n\n        optionsObj[event.target.id] = event.target.value;\n\n\n        let optionInfo = {\n            type: \"multi\",\n\n            payload: {\n                data: {\n\n                    options: optionsObj,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n    }\n\n    addOption() {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        optionsKey = parseInt(optionsKey[optionsKey.length - 1])\n        console.log('optionsKey', optionsKey)\n\n\n\n\n\n        let optionInfo = {\n            type: \"multi\",\n\n            payload: {\n                data: {\n\n                    options: { [optionsKey + 1]: \"Option\" },\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n\n    }\n\n    removeOption(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n\n        if (optionsKey.length !== 1) {\n\n            delete optionsObj[event.target.id];\n\n            let optionInfo = {\n                type: \"multi\",\n\n                payload: {\n                    data: {\n\n                        options: optionsObj,\n\n                        question,\n                    },\n\n                    formID: this.props.formID,\n                    questionNo: this.props.queNo,\n\n\n                }\n\n\n            }\n            this.props.dispatchQueInfo(optionInfo);\n        }\n\n\n\n\n    }\n    render() {\n\n        // noOfOps = this.props.queHandler[this.props.formID][this.props.queNo].noOfOps\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        console.log('optionsKey', optionsKey)\n\n\n        options = optionsKey.map((data, index) => {\n            return <Fragment>\n                <div key={data} id={data} class=\"form-check optionsCont\">\n                    <input class=\"form-check-input optionsIcon\" type=\"checkbox\" value=\"\" />\n                    <input type=\"text\" defaultValue={optionsObj[data]} id={data} onBlur={this.handleOptionInfo} className=\"optionInput\"></input><button onClick={this.removeOption} id={data} class=\"btn shadow-none optionCancelBtn\">&#x2715;</button>\n\n                    {/* <input type=\"checkbox\" name=\"option\" ></input> */}\n                </div>\n\n            </Fragment>\n\n\n        })\n        let queData = this.props.queHandler[this.props.formID][this.props.queNo];\n\n        console.log('queData', queData)\n        return (<Fragment>\n            <div className=\"questionCont\">Q. <input type=\"text\" className=\"queInput\" name='question' onBlur={this.handleQueInfo} defaultValue={queData.question}></input>\n            </div>\n\n\n            {options}\n            <button onClick={this.addOption} class=\"btn btn-primary shadow-none addOption\">Add Option</button>\n        </Fragment>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log(\"state inside ParaTYpeQes\", state)\n    return {\n        queHandler: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        dispatchQueInfo: (para) => dispatch(queAction(para))\n\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(MultiTypeQue);",{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":8,"column":8,"nodeType":"139","messageId":"140","endLine":8,"endColumn":22},{"ruleId":"141","severity":1,"message":"142","line":65,"column":28,"nodeType":"143","messageId":"144","endLine":65,"endColumn":29},{"ruleId":"145","severity":1,"message":"146","line":5,"column":5,"nodeType":"147","messageId":"148","endLine":7,"endColumn":6},{"ruleId":"137","severity":1,"message":"149","line":6,"column":24,"nodeType":"139","messageId":"140","endLine":6,"endColumn":31},{"ruleId":"137","severity":1,"message":"150","line":11,"column":50,"nodeType":"139","messageId":"140","endLine":11,"endColumn":54},{"ruleId":"137","severity":1,"message":"151","line":56,"column":11,"nodeType":"139","messageId":"140","endLine":56,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":6,"column":5,"nodeType":"147","messageId":"148","endLine":8,"endColumn":6},{"ruleId":"137","severity":1,"message":"152","line":14,"column":13,"nodeType":"139","messageId":"140","endLine":14,"endColumn":22},{"ruleId":"153","severity":1,"message":"154","line":16,"column":64,"nodeType":"155","messageId":"156","endLine":16,"endColumn":66},{"ruleId":"157","severity":1,"message":"158","line":21,"column":36,"nodeType":"143","messageId":"159","endLine":21,"endColumn":38},{"ruleId":"157","severity":1,"message":"158","line":32,"column":36,"nodeType":"143","messageId":"159","endLine":32,"endColumn":38},{"ruleId":"157","severity":1,"message":"158","line":32,"column":69,"nodeType":"143","messageId":"159","endLine":32,"endColumn":71},{"ruleId":"137","severity":1,"message":"160","line":2,"column":5,"nodeType":"139","messageId":"140","endLine":2,"endColumn":14},{"ruleId":"137","severity":1,"message":"161","line":2,"column":16,"nodeType":"139","messageId":"140","endLine":2,"endColumn":24},{"ruleId":"137","severity":1,"message":"162","line":2,"column":26,"nodeType":"139","messageId":"140","endLine":2,"endColumn":33},{"ruleId":"157","severity":1,"message":"158","line":16,"column":27,"nodeType":"143","messageId":"159","endLine":16,"endColumn":29},{"ruleId":"137","severity":1,"message":"163","line":2,"column":8,"nodeType":"139","messageId":"140","endLine":2,"endColumn":16},{"ruleId":"153","severity":1,"message":"154","line":74,"column":45,"nodeType":"155","messageId":"156","endLine":74,"endColumn":47},{"ruleId":"157","severity":1,"message":"158","line":75,"column":48,"nodeType":"143","messageId":"159","endLine":75,"endColumn":50},{"ruleId":"157","severity":1,"message":"158","line":76,"column":29,"nodeType":"143","messageId":"159","endLine":76,"endColumn":31},{"ruleId":"164","severity":1,"message":"165","line":90,"column":23,"nodeType":"166","endLine":90,"endColumn":130},{"ruleId":"164","severity":1,"message":"165","line":92,"column":23,"nodeType":"166","endLine":92,"endColumn":132},{"ruleId":"164","severity":1,"message":"165","line":94,"column":23,"nodeType":"166","endLine":94,"endColumn":138},{"ruleId":"164","severity":1,"message":"165","line":95,"column":23,"nodeType":"166","endLine":95,"endColumn":132},{"ruleId":"164","severity":1,"message":"165","line":96,"column":23,"nodeType":"166","endLine":96,"endColumn":128},{"ruleId":"157","severity":1,"message":"158","line":104,"column":67,"nodeType":"143","messageId":"159","endLine":104,"endColumn":69},{"ruleId":"157","severity":1,"message":"158","line":108,"column":67,"nodeType":"143","messageId":"159","endLine":108,"endColumn":69},{"ruleId":"157","severity":1,"message":"158","line":112,"column":67,"nodeType":"143","messageId":"159","endLine":112,"endColumn":69},{"ruleId":"145","severity":1,"message":"146","line":7,"column":5,"nodeType":"147","messageId":"148","endLine":11,"endColumn":6},{"ruleId":"137","severity":1,"message":"162","line":5,"column":15,"nodeType":"139","messageId":"140","endLine":5,"endColumn":22},{"ruleId":"137","severity":1,"message":"167","line":50,"column":13,"nodeType":"139","messageId":"140","endLine":50,"endColumn":20},{"ruleId":"157","severity":1,"message":"158","line":53,"column":29,"nodeType":"143","messageId":"159","endLine":53,"endColumn":31},{"ruleId":"157","severity":1,"message":"158","line":57,"column":29,"nodeType":"143","messageId":"159","endLine":57,"endColumn":31},{"ruleId":"137","severity":1,"message":"168","line":7,"column":28,"nodeType":"139","messageId":"140","endLine":7,"endColumn":32},{"ruleId":"137","severity":1,"message":"169","line":7,"column":43,"nodeType":"139","messageId":"140","endLine":7,"endColumn":50},{"ruleId":"137","severity":1,"message":"170","line":52,"column":13,"nodeType":"139","messageId":"140","endLine":52,"endColumn":23},{"ruleId":"137","severity":1,"message":"162","line":5,"column":15,"nodeType":"139","messageId":"140","endLine":5,"endColumn":22},{"ruleId":"137","severity":1,"message":"168","line":5,"column":28,"nodeType":"139","messageId":"140","endLine":5,"endColumn":32},{"ruleId":"137","severity":1,"message":"169","line":5,"column":43,"nodeType":"139","messageId":"140","endLine":5,"endColumn":50},{"ruleId":"137","severity":1,"message":"170","line":50,"column":13,"nodeType":"139","messageId":"140","endLine":50,"endColumn":23},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'FormGeneration' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'queType' is defined but never used.","'Link' is defined but never used.","'emptyObj' is assigned a value but never used.","'arrayType' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'somearray' is defined but never used.","'newarray' is defined but never used.","'counter' is assigned a value but never used.","'ReactDOM' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'queData' is assigned a value but never used.","'opId' is defined but never used.","'noOfOps' is assigned a value but never used.","'optionsKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]