[{"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/index.js":"1","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/store/storeManager.js":"2","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/homePage/App.js":"3","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/rootReducer.js":"4","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/homePage/Navbar.js":"5","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/NewForm.js":"6","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/actions/action.js":"7","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/generatedForm/FormGeneration.js":"8","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/queTypeUpdater.js":"9","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/queHandler.js":"10","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/formHandler.js":"11","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/QueType.js":"12","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/QueTemplate.js":"13","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/ParaTypeQue.js":"14","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/MultiTypeQue.js":"15","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/SingleTypeQue.js":"16"},{"size":449,"mtime":1613567752541,"results":"17","hashOfConfig":"18"},{"size":538,"mtime":1613567752541,"results":"19","hashOfConfig":"18"},{"size":3774,"mtime":1613567752541,"results":"20","hashOfConfig":"18"},{"size":304,"mtime":1613567752541,"results":"21","hashOfConfig":"18"},{"size":532,"mtime":1613567752541,"results":"22","hashOfConfig":"18"},{"size":1936,"mtime":1613567752541,"results":"23","hashOfConfig":"18"},{"size":926,"mtime":1613567752541,"results":"24","hashOfConfig":"18"},{"size":2073,"mtime":1613567752541,"results":"25","hashOfConfig":"18"},{"size":1352,"mtime":1613567752541,"results":"26","hashOfConfig":"18"},{"size":2035,"mtime":1613567752541,"results":"27","hashOfConfig":"18"},{"size":482,"mtime":1613567752541,"results":"28","hashOfConfig":"18"},{"size":1725,"mtime":1613568968793,"results":"29","hashOfConfig":"18"},{"size":4343,"mtime":1613567752541,"results":"30","hashOfConfig":"18"},{"size":1704,"mtime":1613567752541,"results":"31","hashOfConfig":"18"},{"size":4878,"mtime":1613567752541,"results":"32","hashOfConfig":"18"},{"size":4909,"mtime":1613567752541,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ruc233",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/index.js",[],["75","76"],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/store/storeManager.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/homePage/App.js",["77","78"],"import React, { Fragment } from \"react\";\nimport NewForm from \"../formHandler/NewForm.js\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport { formIdAction, queAction } from \"../actions/action.js\";\nimport { connect } from 'react-redux';\nimport Navbar from \"./Navbar.js\";\nimport \"../css/homePageStyle.css\";\nimport FormGeneration from \"../generatedForm/FormGeneration\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteForm = this.deleteForm.bind(this);\n    this.handleFormPaths = this.handleFormPaths.bind(this);\n  }\n\n  handleFormPaths() {\n    let formIdsObj = this.props.formIDs;\n    let formIdsKey = Object.keys(formIdsObj);\n    let newIDs = parseInt(formIdsKey[formIdsKey.length - 1]) + 1;\n    console.log('newIDs', newIDs)\n\n    // let newarray = this.props.formIDs;\n\n    // newarray.push(newid);\n\n    this.props.dispatchFormIDs({\n      type: \"addNewForm\",\n      payload: {\n        formID: newIDs,\n        formTitle: \"Untitled\"\n      }\n    });\n    console.log(\"indise aap between two dispatch\", newIDs)\n\n    this.props.dispatchPreFormData({\n      // queType: \"\",\n      type: \"preUpdate1\",\n      payload: {\n\n        formID: newIDs - 1,\n        questionNo: 0,\n        data: { question: \"Question\", options: { 0: \"Option\" } }\n      }\n    })\n\n\n  }\n\n\n  deleteForm(event) {\n    let formID = parseInt(event.target.id);\n\n    this.props.dispatchFormIDs({\n      type: \"removeForm\",\n      payload: { formID }\n    })\n\n  }\n  render() {\n    console.log(this.props.formIDs, \"inside render\");\n    let formIdsObj = this.props.formIDs;\n    let formIdsKey = Object.keys(formIdsObj);\n\n    let paths = \"/newform\" + `${formIdsKey[formIdsKey.length - 1]}`;\n    console.log(\"paths\", paths);\n    // let formID = 0;\n    let formList = formIdsKey.map((elm) => {\n\n      return (\n        <Route key={elm} path={`/newform${elm}`}>\n\n          <div className=\"formMainCont\" key={elm}>\n\n            <NewForm formID={elm} formTitle={formIdsObj[elm]} formPath={`/newform${elm}`} />\n          </div>\n        </Route>\n      );\n    });\n\n    let formLink = formIdsKey.map((elm) => {\n      return (<Fragment>\n        <div className=\"formLinkCont\">\n\n\n\n          <div class=\"dropdown\">\n            <button class=\"btn btn-secondary formLinkOption\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">...\n\n            </button>\n            <ul class=\"dropdown-menu\" id=\"deleteBtn\" aria-labelledby=\"dropdownMenuButton1\">\n              <li><span class=\"dropdown-item\" id={elm} onClick={this.deleteForm}>Delete Form</span></li>\n\n            </ul>\n          </div>\n\n          <Link className=\"formLink\" key={elm} to={`/newform${elm}`}>\n\n            <span>{formIdsObj[elm]}</span>\n          </Link>\n        </div>\n\n\n      </Fragment>\n\n      );\n    });\n\n    formLink = formLink.slice(0, formLink.length - 1);\n\n    // console.log(\"formList\", {formList});\n    return (\n\n      <Router>\n        <Navbar />\n        <div className=\"mainCont\">\n          <Switch>\n\n            {formList}\n\n            <Route path=\"/\">\n              <div className=\"formLinkCont createForm\">\n\n                <Link className=\"formLink\" to={paths}>\n                  <span onClick={this.handleFormPaths}> Create Form</span>\n                </Link>\n              </div>\n              {formLink}\n            </Route>\n\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  console.log('state', state)\n  return {\n    formIDs: state.formHandler.formIDs\n\n  }\n}\nconst mapDispatchtoProps = (dispatch) => {\n  return {\n\n    dispatchFormIDs: (para) => dispatch(formIdAction(para)),\n    dispatchPreFormData: (para) => dispatch(queAction(para))\n\n  }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(App);\n","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/rootReducer.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/homePage/Navbar.js",["79"],"import React from \"react\";\nimport \"../css/navbarStyle.css\";\n\nexport default class Navbar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <nav className=\"navBar\">\n                <span id=\"siteName\">Form Maker</span>\n                <span className=\"navBarBtnCont\">\n                    <span className=\"navBarBtn\">About</span>\n                    <span className=\"navBarBtn\">Contact Us</span>\n                </span>\n\n            </nav>\n\n        );\n    }\n}\n","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/NewForm.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/actions/action.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/generatedForm/FormGeneration.js",["80","81","82","83","84","85"],"import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\n\n\nclass FormGeneration extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        let queInfoObj = this.props.queInfo[this.props.formID];\n\n        let queTypeObj = this.props.queType[this.props.formID];\n        let arrayType = [];\n\n        let form = Object.keys(queTypeObj).map((queKey, index) => {\n\n\n\n            // arrayType.push(queTypeObj[key]);\n            if (queTypeObj[queKey] == \"text\") {\n                // queInfoObj[queKey];\n                return <Fragment><div className=\"queCont\" >\n                    <div>Q.{index + 1} {queInfoObj[queKey].question}</div>\n                    <input></input>\n                </div >\n\n                </Fragment >\n\n\n            }\n            if (queTypeObj[queKey] == \"radio\" || queTypeObj[queKey] == \"checkbox\") {\n                let optionsKey = Object.keys(queInfoObj[queKey].options);\n                // optionsKey.pop();\n\n                return (<Fragment><div className=\"queCont\" >\n                    <div>Q.{index + 1} {queInfoObj[queKey].question}</div>\n                    <div>\n                        {optionsKey.map((optionKey) => {\n                            return (<div>\n                                <input type={queTypeObj[queKey]} name={queKey} /> <span>{queInfoObj[queKey].options[optionKey]}</span>\n                            </div>)\n\n                        })}\n                    </div>\n\n                </div >\n\n                </Fragment >);\n\n            }\n\n\n\n        })\n\n        return (\n\n            <form>\n                Hello\n                {form}\n            </form>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log('state', state)\n    return {\n        queType: state.queTypeUpdater,\n        queInfo: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        // dispatchFilledForm: (para) => dispatch(filledForm(para))\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(FormGeneration);\n","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/queTypeUpdater.js",["86","87","88"],"import * as actions from \"../actions/action.js\";\nlet somearray, newarray, counter = 0;\nexport const queTypeUpdater = (\n  state = {}, action) => {\n  //   console.log('action.type', action.type)\n  //   console.log(queDetails.push(action.type));\n  //   return state;\n  // };\n  // somearray = state.queDetails;\n  // console.log('state.queDetails[action.formID', somearray)\n\n\n\n\n  switch (action.type) {\n    case actions.ADD_TXT:\n\n      console.log('state.queDetails', state, action)\n\n\n      return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n    case actions.ADD_CHECKBOX:\n\n      console.log('state.queDetails', state, action)\n\n\n      return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n\n    case actions.ADD_RADIO:\n\n      console.log('state.queDetails', state, action)\n\n\n      return { ...state, [action.formID]: { ...state[action.formID], [action.questionNo]: action.type } };\n\n    case \"removeQue\":\n      console.log('state,action', state, action)\n\n      let updatedQue = state[action.formID];\n      delete updatedQue[action.questionNo]\n      return { ...state, [action.formID]: { ...updatedQue } };\n\n\n    default:\n      return state;\n  }\n\n}\n// };\n// {\n//   queNo:,\n//     queType:,\n//   data: {\n\n//   }\n// }\n\n\n// state = {\n//   formID: { queDetails: {} }","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/queHandler.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/reducers/formHandler.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/QueType.js",[],"/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/QueTemplate.js",["89","90","91","92","93","94","95","96","97","98"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { connect } from \"react-redux\";\nimport MultiTypeQue from \"./MultiTypeQue\";\nimport SingleTypeQue from \"./SingleTypeQue\";\nimport ParaTypeQue from \"./ParaTypeQue\";\n\nimport { queType, removeQue } from \"../actions/action\";\n\n\nclass QueTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleQueInversion = this.handleQueInversion.bind(this);\n    this.removeQuestion = this.removeQuestion.bind(this);\n\n  }\n\n  handleQueInversion(event) {\n    let queNo = event.target.id;\n    console.log('event.target.value', event.target.name)\n    // ReactDOM.findDOMNode(event.target).className = \"dropdown-item active\";\n\n    this.props.dispatchQueInversion({\n      type: event.target.name,\n      payload: {\n        formID: this.props.formID,\n        questionNo: queNo,\n\n      }\n    });\n  }\n\n  removeQuestion(event) {\n    let queNo = event.target.id;\n\n    // let queObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n    // // console.log('optionsObj', optionsObj)\n    // let optionsKey = Object.keys(queObj);\n    // delete queObj[queNo];\n\n    this.props.dispatchRemoveQuestion({\n      type: \"removeQue\",\n      payload: {\n\n        formID: this.props.formID,\n        questionNo: queNo,\n\n      }\n    });\n\n  }\n\n  render() {\n    // const { queDetails } = this.props;\n    console.log('inside QT', this.props.queTypeUpdater)\n    let formKeys = Object.keys(this.props.queTypeUpdater);\n    console.log('formKeys', formKeys)\n\n\n    let que = formKeys.map((element, index) => {\n      console.log('object', (this.props.formID == parseInt(element)))\n      if (this.props.formID == parseInt(element)) {\n        let queKeys = Object.keys(this.props.queTypeUpdater[element]);\n        console.log('INSIDE IF')\n\n        return queKeys.map((elm, ind) => {\n\n          return (\n            <div className=\"queCont\" key={ind}>\n              <div className=\"dropdownQue\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  Change Question Type</button>\n\n                <ul className=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"dropdownMenuButton2\">\n                  <li><a className=\"dropdown-item\" name=\"text\" value=\"text\" id={parseInt(elm)} onClick={this.handleQueInversion}>Paragraph</a></li>\n\n                  <li><a className=\"dropdown-item\" name=\"radio\" value=\"radio\" id={parseInt(elm)} onClick={this.handleQueInversion}>Single Option</a></li>\n\n                  <li><a className=\"dropdown-item\" name=\"checkbox\" value=\"checkbox\" id={parseInt(elm)} onClick={this.handleQueInversion}>Multi Option</a></li>\n\n                </ul>\n                <button id={parseInt(elm)} onClick={this.removeQuestion} class=\"btn btn-danger\">\n                  Remove Question\n              </button>\n              </div>\n              {\n                this.props.queTypeUpdater[element][parseInt(elm)] == \"text\" ? <ParaTypeQue formID={this.props.formID} queNo={parseInt(elm)} /> : null\n              }\n\n              {\n                this.props.queTypeUpdater[element][parseInt(elm)] == \"radio\" ? <SingleTypeQue formID={this.props.formID} queNo={parseInt(elm)} /> : null\n              }\n\n              {\n                this.props.queTypeUpdater[element][parseInt(elm)] == \"checkbox\" ? <MultiTypeQue formID={this.props.formID} queNo={parseInt(elm)} /> : null\n              }\n              {/* \n              <select id={parseInt(elm)} onChange={this.handleQueInversion} >\n                <option select >Change Question Type</option>\n                <option name=\"text\" value=\"text\">Para</option>\n                <option name=\"checkbox\" value=\"checkbox\"> CheckBOx</option>\n                <option name=\"radio\" value=\"radio\">Radio</option>\n\n              </select> */}\n\n\n\n\n\n\n\n\n\n\n\n            </div>\n          )\n        })\n      }\n    })\n\n\n\n    return <div>{que}</div>;\n  }\n\n\n\n\n}\n\nconst mapStatetoProps = (state) => {\n  // console.log('Indise quetemplate', state)\n  return {\n    queTypeUpdater: state.queTypeUpdater\n  }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n  return {\n    dispatchQueInversion: (para) => dispatch(queType(para)),\n    dispatchRemoveQuestion: (para) => dispatch(removeQue(para))\n  }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(QueTemplate);\n","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/ParaTypeQue.js",["99"],"import React, { Fragment } from 'react';\nimport { queAction } from \"../actions/action.js\";\nimport { connect } from \"react-redux\";\n\nlet question, counter = 0;\n\nclass ParaTypeQue extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.handleInfo = this.handleInfo.bind(this);\n\n\n\n    }\n    // componentDidMount() {\n    //     if (counter == 0) {\n\n    //         this.props.dispatchQueInfo({\n    //             type: \"para\",\n    //             question: \"Question\",\n    //             formID: this.props.formID,\n    //             questionNo: this.props.queNo + 1\n\n    //         });\n    //     }\n\n    // }\n\n    handleInfo(event) {\n        question = event.target.value;\n        console.log('placeholder', question)\n        let queInfo = {\n            type: \"para\",\n            payload: {\n                data: { question },\n                formID: this.props.formID,\n                questionNo: this.props.queNo\n            }\n\n        }\n\n\n        this.props.dispatchQueInfo(queInfo);\n\n    }\n\n    render() {\n        let queData = this.props.queHandler[this.props.formID][this.props.queNo];\n\n        return (<Fragment><div className=\"questionCont\">Q. <input className=\"queInput\" type=\"text\" onChange={this.handleInfo} defaultValue={queData.question} /></div>\n            <div>Answer</div>\n        </Fragment>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log(\"state inside ParaTYpeQes\", state)\n    return {\n        queHandler: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        dispatchQueInfo: (para) => dispatch(queAction(para))\n\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(ParaTypeQue);","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/MultiTypeQue.js",["100","101","102"],"import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { queAction } from \"../actions/action.js\";\n\nlet question = \"Question\", opId, options, noOfOps = 1;\nclass MultiTypeQue extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleQueInfo = this.handleQueInfo.bind(this);\n        this.handleOptionInfo = this.handleOptionInfo.bind(this);\n        this.removeOption = this.removeOption.bind(this);\n        this.addOption = this.addOption.bind(this);\n    }\n\n    handleQueInfo(event) {\n\n        question = event.target.value;\n        console.log('placeholder', question)\n\n\n\n\n        let queInfo = {\n            type: \"multi\",\n\n            payload: {\n                data: {\n\n                    options: this.props.queHandler[this.props.formID][this.props.queNo].options,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n        }\n        this.props.dispatchQueInfo(queInfo);\n\n\n\n\n    }\n\n    handleOptionInfo(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        let optionsKey = Object.keys(optionsObj);\n\n\n\n        optionsObj[event.target.id] = event.target.value;\n\n\n        let optionInfo = {\n            type: \"multi\",\n\n            payload: {\n                data: {\n\n                    options: optionsObj,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n    }\n\n    addOption() {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        optionsKey = parseInt(optionsKey[optionsKey.length - 1])\n        console.log('optionsKey', optionsKey)\n\n\n\n\n\n        let optionInfo = {\n            type: \"multi\",\n\n            payload: {\n                data: {\n\n                    options: { [optionsKey + 1]: \"Option\" },\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n\n    }\n\n    removeOption(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n\n        if (optionsKey.length !== 1) {\n\n            delete optionsObj[event.target.id];\n\n            let optionInfo = {\n                type: \"multi\",\n\n                payload: {\n                    data: {\n\n                        options: optionsObj,\n\n                        question,\n                    },\n\n                    formID: this.props.formID,\n                    questionNo: this.props.queNo,\n\n\n                }\n\n\n            }\n            this.props.dispatchQueInfo(optionInfo);\n        }\n\n\n\n\n    }\n    render() {\n\n        // noOfOps = this.props.queHandler[this.props.formID][this.props.queNo].noOfOps\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        console.log('optionsKey', optionsKey)\n\n\n        options = optionsKey.map((data, index) => {\n            return <Fragment>\n                <div key={data} id={data} class=\"form-check optionsCont\">\n                    <input class=\"form-check-input\" type=\"checkbox\" value=\"\" />\n                    <input type=\"text\" defaultValue={optionsObj[data]} id={data} onBlur={this.handleOptionInfo} className=\"optionInput\"></input><button onClick={this.removeOption} id={data} class=\"btn btn-outline-warning\">X</button>\n\n                    {/* <input type=\"checkbox\" name=\"option\" ></input> */}\n                </div>\n\n            </Fragment>\n\n\n        })\n        let queData = this.props.queHandler[this.props.formID][this.props.queNo];\n\n        console.log('queData', queData)\n        return (<Fragment>\n            <div>Q. <input type=\"text\" className=\"queInput\" name='question' onBlur={this.handleQueInfo} defaultValue={queData.question}></input>\n            </div>\n\n\n            {options}\n            <button onClick={this.addOption} class=\"btn btn-primary addOption\">Add Option</button>\n        </Fragment>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log(\"state inside ParaTYpeQes\", state)\n    return {\n        queHandler: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        dispatchQueInfo: (para) => dispatch(queAction(para))\n\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(MultiTypeQue);","/home/dgk/Documents/Codes/1- Git-Repos/Recruitment-App/Form-Maker-App/src/formHandler/SingleTypeQue.js",["103","104","105"],"import React, { Fragment } from 'react';\nimport { connect } from \"react-redux\";\nimport { queAction } from \"../actions/action.js\";\n\n\n\nlet question = \"Question\", opId, options, noOfOps = 1;\nclass SingleTypeQue extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleQueInfo = this.handleQueInfo.bind(this);\n        this.handleOptionInfo = this.handleOptionInfo.bind(this);\n        this.removeOption = this.removeOption.bind(this);\n        this.addOption = this.addOption.bind(this);\n    }\n\n    handleQueInfo(event) {\n\n        question = event.target.value;\n        console.log('placeholder', question)\n\n\n\n\n        let queInfo = {\n            type: \"single\",\n\n            payload: {\n                data: {\n\n                    options: this.props.queHandler[this.props.formID][this.props.queNo].options,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n        }\n        this.props.dispatchQueInfo(queInfo);\n\n\n\n\n    }\n\n    handleOptionInfo(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        let optionsKey = Object.keys(optionsObj);\n\n\n\n        optionsObj[event.target.id] = event.target.value;\n\n\n        let optionInfo = {\n            type: \"single\",\n\n            payload: {\n                data: {\n\n                    options: optionsObj,\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n    }\n\n    addOption() {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        optionsKey = parseInt(optionsKey[optionsKey.length - 1])\n        console.log('optionsKey', optionsKey)\n\n\n\n\n\n        let optionInfo = {\n            type: \"single\",\n\n            payload: {\n                data: {\n\n                    options: { [optionsKey + 1]: \"Option\" },\n\n                    question,\n                },\n\n                formID: this.props.formID,\n                questionNo: this.props.queNo,\n\n\n            }\n\n\n        }\n        this.props.dispatchQueInfo(optionInfo);\n\n    }\n\n    removeOption(event) {\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n\n        if (optionsKey.length !== 1) {\n\n            delete optionsObj[event.target.id];\n\n            let optionInfo = {\n                type: \"single\",\n\n                payload: {\n                    data: {\n\n                        options: optionsObj,\n\n                        question,\n                    },\n\n                    formID: this.props.formID,\n                    questionNo: this.props.queNo,\n\n\n                }\n\n\n            }\n            this.props.dispatchQueInfo(optionInfo);\n        }\n\n\n\n\n    }\n    render() {\n\n        // noOfOps = this.props.queHandler[this.props.formID][this.props.queNo].noOfOps\n        let optionsObj = this.props.queHandler[this.props.formID][this.props.queNo].options;\n        console.log('optionsObj', optionsObj)\n        let optionsKey = Object.keys(optionsObj);\n        console.log('optionsKey', optionsKey)\n\n\n        options = optionsKey.map((data, index) => {\n            return <Fragment>\n\n\n                <div class=\"form-check optionsCont\" key={data} id={data}>\n                    <input class=\"form-check-input optionsIcon\" type=\"radio\" name=\"flexRadioDefault\" />\n\n                    <input type=\"text\" className=\"optionInput\" defaultValue={optionsObj[data]} id={data} onBlur={this.handleOptionInfo}></input> <button onClick={this.removeOption} id={data} class=\"btn btn-outline-warning\">X</button>\n\n                </div>\n\n\n                {/* <input type=\"radio\" name=\"option\" ></input> */}\n\n            </Fragment>\n\n\n        })\n        let queData = this.props.queHandler[this.props.formID][this.props.queNo];\n\n        console.log('queData', queData)\n        return (<Fragment>\n            <div>Q. <input type=\"text\" className=\"queInput\" name='question' onBlur={this.handleQueInfo} defaultValue={queData.question}></input>\n            </div>\n\n\n            {options}\n            <button onClick={this.addOption} class=\"btn btn-primary addOption\">add option</button>\n        </Fragment>\n\n        );\n    }\n\n}\n\nconst mapStatetoProps = (state) => {\n    console.log(\"state inside ParaTYpeQes\", state)\n    return {\n        queHandler: state.queHandler\n    }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n    return {\n\n        dispatchQueInfo: (para) => dispatch(queAction(para))\n\n    }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(SingleTypeQue);",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":67,"column":28,"nodeType":"116","messageId":"117","endLine":67,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":5,"column":5,"nodeType":"120","messageId":"121","endLine":7,"endColumn":6},{"ruleId":"118","severity":1,"message":"119","line":6,"column":5,"nodeType":"120","messageId":"121","endLine":8,"endColumn":6},{"ruleId":"110","severity":1,"message":"122","line":14,"column":13,"nodeType":"112","messageId":"113","endLine":14,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":16,"column":64,"nodeType":"125","messageId":"126","endLine":16,"endColumn":66},{"ruleId":"127","severity":1,"message":"128","line":21,"column":36,"nodeType":"116","messageId":"129","endLine":21,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":32,"column":36,"nodeType":"116","messageId":"129","endLine":32,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":32,"column":69,"nodeType":"116","messageId":"129","endLine":32,"endColumn":71},{"ruleId":"110","severity":1,"message":"130","line":2,"column":5,"nodeType":"112","messageId":"113","endLine":2,"endColumn":14},{"ruleId":"110","severity":1,"message":"131","line":2,"column":16,"nodeType":"112","messageId":"113","endLine":2,"endColumn":24},{"ruleId":"110","severity":1,"message":"132","line":2,"column":26,"nodeType":"112","messageId":"113","endLine":2,"endColumn":33},{"ruleId":"110","severity":1,"message":"133","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":62,"column":45,"nodeType":"125","messageId":"126","endLine":62,"endColumn":47},{"ruleId":"127","severity":1,"message":"128","line":63,"column":48,"nodeType":"116","messageId":"129","endLine":63,"endColumn":50},{"ruleId":"127","severity":1,"message":"128","line":64,"column":29,"nodeType":"116","messageId":"129","endLine":64,"endColumn":31},{"ruleId":"134","severity":1,"message":"135","line":77,"column":23,"nodeType":"136","endLine":77,"endColumn":130},{"ruleId":"134","severity":1,"message":"135","line":79,"column":23,"nodeType":"136","endLine":79,"endColumn":132},{"ruleId":"134","severity":1,"message":"135","line":81,"column":23,"nodeType":"136","endLine":81,"endColumn":138},{"ruleId":"127","severity":1,"message":"128","line":89,"column":67,"nodeType":"116","messageId":"129","endLine":89,"endColumn":69},{"ruleId":"127","severity":1,"message":"128","line":93,"column":67,"nodeType":"116","messageId":"129","endLine":93,"endColumn":69},{"ruleId":"127","severity":1,"message":"128","line":97,"column":67,"nodeType":"116","messageId":"129","endLine":97,"endColumn":69},{"ruleId":"110","severity":1,"message":"132","line":5,"column":15,"nodeType":"112","messageId":"113","endLine":5,"endColumn":22},{"ruleId":"110","severity":1,"message":"137","line":5,"column":28,"nodeType":"112","messageId":"113","endLine":5,"endColumn":32},{"ruleId":"110","severity":1,"message":"138","line":5,"column":43,"nodeType":"112","messageId":"113","endLine":5,"endColumn":50},{"ruleId":"110","severity":1,"message":"139","line":50,"column":13,"nodeType":"112","messageId":"113","endLine":50,"endColumn":23},{"ruleId":"110","severity":1,"message":"137","line":7,"column":28,"nodeType":"112","messageId":"113","endLine":7,"endColumn":32},{"ruleId":"110","severity":1,"message":"138","line":7,"column":43,"nodeType":"112","messageId":"113","endLine":7,"endColumn":50},{"ruleId":"110","severity":1,"message":"139","line":52,"column":13,"nodeType":"112","messageId":"113","endLine":52,"endColumn":23},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'FormGeneration' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'arrayType' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'somearray' is defined but never used.","'newarray' is defined but never used.","'counter' is assigned a value but never used.","'ReactDOM' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'opId' is defined but never used.","'noOfOps' is assigned a value but never used.","'optionsKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]